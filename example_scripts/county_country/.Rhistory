test <- inner_join(sci_dat, c("user_loc"="fr_loc", "fr_loc"="user_loc"))
test <- inner_join(sci_dat, sci_dat, c("user_loc"="fr_loc", "fr_loc"="user_loc"))
head(test)
sci_dat
# install.packages("tidyverse")
# install.paackages("sf")
# install.packages("tigris")
# install.packages("raster")
library(tidyverse)
library(sf)
library(tigris)
library(raster)
#### FILL IN THIS LINE BEFORE RUNNING ####
dir.sci_dat_county_country <- "../../data_DONT_SYNC/county_country.tsv"
# Read in the county-county SCI data
sci_dat <- read_tsv(dir.sci_dat_county_country)
sci_dat <- rename(sci_dat, sci=scaled_sci) %>%
filter(fr_loc != 'US') # remove county -> US SCI
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
counties_map <- counties_map %>%
mutate(fips = paste0(STATEFP, COUNTYFP))
# Download country borders into a temp directory, unzip and use
download.file(
"https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip",
"/tmp/countries.zip"
)
dir.create("/tmp/countries/", showWarnings = FALSE)
unzip("/tmp/countries.zip", exdir="/tmp/countries")
countries_shapes <- st_read("/tmp/countries/TM_WORLD_BORDERS-0.3.shp") %>%
filter(!ISO3 %in% c("ATF", "ATA"))
# Make a vector of regions to generate maps for
regions <- c("06075", # San Francisco County, USA
"06029", # Kern County, USA
"17031", # Cook County, USA
"11001") # Washington, DC
# Create measures to scale up from the overall 50th percentile location pair
x1 <- quantile(sci_dat$sci, .50)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
# Create the graph for each of the regions in the list of regions
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
right_join(dat,
countries_shapes,
by=c("fr_loc"="ISO2")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 50th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 50th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- counties_map %>%
filter(fips == regions[i])
# Plot the data
ggplot(st_transform(dat_map, "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) +
geom_sf(aes(fill = sci_bkt), colour="#ADADAD", size=0.1) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=1) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", na.value="gray", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 8),
legend.key.size = unit(0.8, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5))
# Save output to the folder "output/county_output"
ggsave(paste0("output/sci_", regions[i], ".jpg"),
width = 6.5, height = 3.8, units = "in", dpi = 800, last_plot())
}
dir.sci_dat_gadm1_nuts3_counties <- "../../data_DONT_SYNC/gadm1_nuts3_counties_gadm1_nuts3_counties.tsv"
# Read in the detailed GADM SCI data (this dataset is quite large and
# this line of code will likely take a minute or so)
sci_dat <- read_tsv(dir.sci_dat_gadm1_nuts3_counties)
sci_dat <- rename(sci_dat, sci=scaled_sci)
# Read in the detailed GADM shapes
shapes_in <- readRDS("../../gadm_based_shapefiles/rds_format/gadm1_nuts3_counties.Rds")
# Simplify the shapes to make it possible to generate maps
# This will make the shapes look weird sometimes when we zoom very far in
# but is necessary to get this front-end only html file to render reasonably.
shapes_simple <- st_simplify(shapes_in, dTolerance = .015)
regions <- c("USA06075", # San Francisco County, CA, USA
"USA06029", # Kern County, CA, USA
"USA26125") # Oakland County, MI, USA
# Create measures to scale up from the overall 50th percentile location pair
x1 <- quantile(sci_dat$sci, .5)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
inner_join(dat,
shapes_simple,
by=c("fr_loc"="key")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 50th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 50th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- dat_map %>%
filter(fr_loc == regions[i])
# Create labels for mouse over
labels <- sprintf(
"<strong>Key: </strong>%s<br/>
<strong>Name: </strong>%s<br/>
<strong>County: </strong>%s<br/>
<strong>SCI: </strong>%s<br/>",
dat_map$fr_loc,
dat_map$name,
dat_map$country,
dat_map$sci_bkt) %>%
lapply(htmltools::HTML)
# We do this again so that there is a label on the home district as well
labels2 <- sprintf(
"<strong>Key: </strong>%s<br/>
<strong>Name: </strong>%s<br/>
<strong>County: </strong>%s<br/>",
curr_region_outline$fr_loc,
curr_region_outline$name,
curr_region_outline$country) %>%
lapply(htmltools::HTML)
pal <- colorFactor(palette="GnBu", domain=dat_map$sci_bkt)
m <- leaflet() %>%
addProviderTiles(
"Esri.WorldStreetMap",
options = leafletOptions()
) %>%
addPolygons(
data=dat_map,
weight=2,
fillOpacity=0.9,
color= ~pal(sci_bkt),
fillColor = ~pal(sci_bkt),
group = "shapes1",
label = labels,
highlight = highlightOptions(
weight = 4,
color = "black"
)
) %>%
addPolygons(
data=curr_region_outline,
fillColor="Red",
fillOpacity = 1,
label = labels2,
color = "Red",
weight = 0.6
)
# htmlWidgets will often fail if not saving to current wd.
# We reset it here then move it back.
setwd("output")
saveWidget(m, paste0(regions[i], "_interactive.html"))
setwd("..")
}
# install.packages("tidyverse")
# install.paackages("sf")
# install.packages("tigris")
# install.packages("raster")
library(tidyverse)
library(sf)
library(tigris)
library(raster)
#### FILL IN THIS LINE BEFORE RUNNING ####
dir.sci_dat_county_country <- "../../data_DONT_SYNC/county_country.tsv"
# Read in the county-county SCI data
sci_dat <- read_tsv(dir.sci_dat_county_country)
sci_dat <- rename(sci_dat, sci=scaled_sci) %>%
filter(fr_loc != 'US') # remove county -> US SCI
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
counties_map <- counties_map %>%
mutate(fips = paste0(STATEFP, COUNTYFP))
# Download country borders into a temp directory, unzip and use
download.file(
"https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip",
"/tmp/countries.zip"
)
dir.create("/tmp/countries/", showWarnings = FALSE)
unzip("/tmp/countries.zip", exdir="/tmp/countries")
countries_shapes <- st_read("/tmp/countries/TM_WORLD_BORDERS-0.3.shp") %>%
filter(!ISO3 %in% c("ATF", "ATA"))
# Make a vector of regions to generate maps for
regions <- c("06075", # San Francisco County, USA
"06029", # Kern County, USA
"17031", # Cook County, USA
"11001") # Washington, DC
# Create measures to scale up from the overall 50th percentile location pair
x1 <- quantile(sci_dat$sci, .50)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
# Create the graph for each of the regions in the list of regions
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
right_join(dat,
countries_shapes,
by=c("fr_loc"="ISO2")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 50th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 50th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- counties_map %>%
filter(fips == regions[i])
# Plot the data
ggplot(st_transform(dat_map, "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) +
geom_sf(aes(fill = sci_bkt), colour="#ADADAD", size=0.1) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=1) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", na.value="gray", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 8),
legend.key.size = unit(0.8, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5))
# Save output to the folder "output/county_output"
ggsave(paste0("output/sci_", regions[i], ".jpg"),
width = 6.5, height = 3.8, units = "in", dpi = 800, last_plot())
}
# install.packages("tidyverse")
# install.paackages("sf")
# install.packages("tigris")
# install.packages("raster")
library(tidyverse)
library(sf)
library(tigris)
library(raster)
### FILL THIS LINE BEFORE RUNNING
dir.sci_dat_county <- ""
# Read in the county-county SCI data
sci_dat <- read_tsv(dir.sci_dat_county)
sci_dat <- rename(sci_dat, sci=scaled_sci)
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+init=epsg:2163"))
states_map <- states(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+init=epsg:2163"))
counties_map <- counties_map %>% mutate(fips = paste0(STATEFP, COUNTYFP))
# Make a vector of regions to generate maps for
regions <- c("06075", # San Francisco County, USA
"06029", # Kern County, USA
"17031", # Cook County, USA
"11001") # Washington, DC
# Create measures to scale up from the overall 20th percentile location pair
x1 <- quantile(sci_dat$sci, .2)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
# Create the graph for each of the regions in the list of regions
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
right_join(dat,
counties_map,
by=c("fr_loc"="fips")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 20th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 20th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- dat_map %>%
filter(fr_loc == regions[i])
# Plot the data
ggplot(dat_map) +
geom_sf(aes(fill = sci_bkt), colour="#ADADAD", lwd=0) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=0.4) +
geom_sf(data=states_map, fill="transparent", colour="#A1A1A1", size=0.2) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", na.value="#F5F5F5", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 8),
legend.key.size = unit(0.8, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5)) +
coord_sf(xlim = c(-2200000, 2700000), ylim = c(-2200000, 850000), expand = FALSE)
# Save output to the folder "output/county_output"
ggsave(paste0("output/sci_", regions[i], ".jpg"),
width = 6.5, height = 3.8, units = "in", dpi = 800, last_plot())
}
# install.packages("tidyverse")
# install.paackages("sf")
# install.packages("tigris")
# install.packages("raster")
library(tidyverse)
library(sf)
library(tigris)
library(raster)
### FILL THIS LINE BEFORE RUNNING
dir.sci_dat_county <- "../../data_DONT_SYNC/county_county.tsv"
# Read in the county-county SCI data
sci_dat <- read_tsv(dir.sci_dat_county)
sci_dat <- rename(sci_dat, sci=scaled_sci)
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+init=epsg:2163"))
states_map <- states(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+init=epsg:2163"))
counties_map <- counties_map %>% mutate(fips = paste0(STATEFP, COUNTYFP))
# Make a vector of regions to generate maps for
regions <- c("06075", # San Francisco County, USA
"06029", # Kern County, USA
"17031", # Cook County, USA
"11001") # Washington, DC
# Create measures to scale up from the overall 20th percentile location pair
x1 <- quantile(sci_dat$sci, .2)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
# Create the graph for each of the regions in the list of regions
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
right_join(dat,
counties_map,
by=c("fr_loc"="fips")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 20th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 20th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- dat_map %>%
filter(fr_loc == regions[i])
# Plot the data
ggplot(dat_map) +
geom_sf(aes(fill = sci_bkt), colour="#ADADAD", lwd=0) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=0.4) +
geom_sf(data=states_map, fill="transparent", colour="#A1A1A1", size=0.2) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", na.value="#F5F5F5", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 8),
legend.key.size = unit(0.8, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5)) +
coord_sf(xlim = c(-2200000, 2700000), ylim = c(-2200000, 850000), expand = FALSE)
# Save output to the folder "output/county_output"
ggsave(paste0("output/sci_", regions[i], ".jpg"),
width = 6.5, height = 3.8, units = "in", dpi = 800, last_plot())
}
# install.packages("tidyverse")
# install.paackages("sf")
# install.packages("tigris")
# install.packages("raster")
library(tidyverse)
library(sf)
library(tigris)
library(raster)
#### FILL IN THIS LINE BEFORE RUNNING ####
dir.sci_dat_county_country <- "../../data_DONT_SYNC/county_country.tsv"
# Read in the county-county SCI data
sci_dat <- read_tsv(dir.sci_dat_county_country)
sci_dat <- rename(sci_dat, sci=scaled_sci) %>%
filter(fr_loc != 'US') # remove county -> US SCI
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform(crs("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
counties_map <- counties_map %>%
mutate(fips = paste0(STATEFP, COUNTYFP))
# Download country borders into a temp directory, unzip and use
download.file(
"https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip",
"/tmp/countries.zip"
)
dir.create("/tmp/countries/", showWarnings = FALSE)
unzip("/tmp/countries.zip", exdir="/tmp/countries")
countries_shapes <- st_read("/tmp/countries/TM_WORLD_BORDERS-0.3.shp") %>%
filter(!ISO3 %in% c("ATF", "ATA"))
# Make a vector of regions to generate maps for
regions <- c("06075", # San Francisco County, USA
"06029", # Kern County, USA
"17031", # Cook County, USA
"11001") # Washington, DC
# Create measures to scale up from the overall 50th percentile location pair
x1 <- quantile(sci_dat$sci, .50)
x2 <- x1 * 2
x3 <- x1 * 3
x5 <- x1 * 5
x10 <- x1 * 10
x25 <- x1 * 25
x100 <- x1 * 100
# Create the graph for each of the regions in the list of regions
for(i in 1:length(regions)){
# Get the data for the ith region
dat <- filter(sci_dat, user_loc == regions[i])
# Merge with shape files
dat_map <-
right_join(dat,
countries_shapes,
by=c("fr_loc"="ISO2")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(sci_bkt = case_when(
sci < x1 ~ "< 1x (Overall 50th percentile)",
sci < x2 ~ "1-2x",
sci < x3 ~ "2-3x",
sci < x5 ~ "3-5x",
sci < x10 ~ "5-10x",
sci < x25 ~ "10-25x",
sci < x100 ~ "25-100x",
sci >= x100 ~ ">= 100x")) %>%
mutate(sci_bkt = factor(sci_bkt, levels=c("< 1x (Overall 50th percentile)", "1-2x", "2-3x", "3-5x",
"5-10x", "10-25x", "25-100x", ">= 100x")))
# Get the map of the region you are in
curr_region_outline <- counties_map %>%
filter(fips == regions[i])
# Plot the data
ggplot(st_transform(dat_map, "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) +
geom_sf(aes(fill = sci_bkt), colour="#ADADAD", size=0.1) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=1) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", na.value="gray", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 8),
legend.key.size = unit(0.8, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5))
# Save output to the folder "output/county_output"
ggsave(paste0("output/sci_", regions[i], ".jpg"),
width = 6.5, height = 3.8, units = "in", dpi = 800, last_plot())
}
