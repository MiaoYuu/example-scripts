getwd()
source("a1_gen_italy_distances.R")
source("a1_gen_italy_distances.R")
require(tidyverse)
require(sp)
require(sf)
require(tigris)
require(lubridate)
require(randomForest)
############################################################
#### A. Make the results for earliest hotspots in US/IT ####
############################################################
# A1: Generate the distance between the centroids of all Italian provinces
source("early_exposure/a1_gen_italy_distances.R")
# A2: Prepare COVID and SCI data for binscatters and maps
source("early_exposure/a2_prep_data_for_binscatters.R")
# A3: Make the SCI to intital hotspots and early COVID maps
source("early_exposure/a3_make_maps.R")
# A4 is a Stata file run from run_all_stata_scripts.do
rm(list=ls())
getwd()
# Purpose: Make the SCI to intital hotspots and early COVID maps
# Inputs:
#     _input/county_sci_data/county_county.tsv
#     _intermediate/westchester_sci_covariates.csv
#     _intermediate/lodi_sci_covariates.csv
#     _input/SCI -- GADM-GADM/gadm1_nuts3_counties/geometries/gadm1_nuts3_counties.Rds
# Outputs:
#     _output/sci_from_westchester.jpg
#     _output/us_cases.jpg
#     _output/sci_from_lodi.jpg
#     _output/italy_cases.jpg
# Date: 07/30/2020
# Steps:
#     1. Generate Westchester maps
#     2. Generate Lodi maps
library(tigris)
library(sf)
library(tidyverse)
################################
# 1. Generate Westchester maps #
################################
# Get the maps from the tigris package
counties_map <- counties(cb = TRUE) %>%
st_as_sf() %>%
st_transform("+init=epsg:2163") %>%
mutate(fips = as.numeric(paste0(STATEFP, COUNTYFP)))
states_map <- states(cb = TRUE) %>%
st_as_sf() %>%
st_transform("+init=epsg:2163")
# Read in county SCI data.
# We don't use other data set because it excludes NYC counties
# other than Manhattan, which can be seen on the map.
sci_dat <- read_tsv("../_input/county_sci_data/county_county.tsv")
county_dat <- rename(sci_dat, sci=scaled_sci) %>%
filter(user_loc == "36119") %>%
mutate(county_fips = as.numeric(fr_loc)) %>%
select(-user_loc, -fr_loc)
# Merge with shape files
dat_map <-
right_join(county_dat,
counties_map,
by=c("county_fips"="fips")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(log_sci = log(sci)) %>%
mutate(log_sci_bkt = case_when(
log_sci < 4 ~ "< 4",
log_sci < 4.5 ~ "4 - 4.5",
log_sci < 5 ~ "4.5 - 5",
log_sci < 6 ~ "5 - 6",
log_sci < 7.5 ~ "6 - 7.5",
log_sci >= 7.5 ~ "7.5+")) %>%
mutate(log_sci_bkt = factor(log_sci_bkt, levels=c("< 4", "4 - 4.5", "4.5 - 5",
"5 - 6", "6 - 7.5", "7.5+")))
# Get the map of the region you are in
curr_region_outline <- dat_map %>%
filter(county_fips == 36119)
# Plot the US case data
ggplot(filter(dat_map, !is.na(log_sci_bkt))) +
geom_sf(aes(fill = log_sci_bkt), colour="#ADADAD", lwd=0) +
geom_sf(data=states_map, fill="transparent", colour="#A1A1A1", size=0.2) +
geom_sf(data=curr_region_outline, fill="#A00000", colour="#A00000", size=0.2) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "GnBu", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 6.5),
legend.key.size = unit(0.25, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5)) +
coord_sf(xlim = c(-2200000, 2700000), ylim = c(-2200000, 850000), expand = FALSE)
ggsave(paste0("../_output/sci_from_westchester.jpg"),
width = 3.25, height = 1.9, units = "in", dpi = 800, last_plot())
# Read in cases data
county_dat <- read_csv("../_intermediate/westchester_sci_covariates.csv")
# Merge with shape files
dat_map <-
right_join(county_dat,
counties_map,
by=c("county_fips"="fips")) %>%
st_as_sf
# Create clean buckets for these levels
dat_map <- dat_map %>%
mutate(cases_per_10k_bkt = case_when(
cases_per_10k < 1 ~ "< 1",
cases_per_10k < 1.5 ~ "1 - 1.5",
cases_per_10k < 3 ~ "1.5 - 3",
cases_per_10k < 6 ~ "3 - 6",
cases_per_10k < 10 ~ "6 - 10",
cases_per_10k >= 10 ~ "10+")) %>%
mutate(cases_per_10k_bkt = factor(cases_per_10k_bkt, levels=c("< 1", "1 - 1.5", "1.5 - 3", "3 - 6",
"6 - 10", "10+")))
# Plot the Westchester SCI data
ggplot(filter(dat_map, !is.na(cases_per_10k_bkt))) +
geom_sf(aes(fill = cases_per_10k_bkt), colour="#ADADAD", lwd=0) +
geom_sf(data=states_map, fill="transparent", colour="#A1A1A1", size=0.2) +
labs(fill = "SCI") +
theme_void() +
scale_fill_brewer(palette = "YlOrRd", drop=FALSE) +
theme(legend.title = element_blank(),
legend.text  = element_text(size = 6.5),
legend.key.size = unit(0.25, "lines"),
legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1, title.hjust = 0.5)) +
coord_sf(xlim = c(-2200000, 2700000), ylim = c(-2200000, 850000), expand = FALSE)
library(tidyverse)
library(sp)
library(sf)
# Read in the detailed GADM shapes
shapes_it <- readRDS("../_input/gadm_sci_data/gadm1_nuts3_counties.Rds") %>%
filter(substr(key, 1, 2) == "IT") %>%
filter(substr(key, 1, 2) == "IT")
getwd()
setwd("..")
library(tidyverse)
library(sp)
library(sf)
# Read in the detailed GADM shapes
shapes_it <- readRDS("../_input/gadm_sci_data/gadm1_nuts3_counties.Rds") %>%
filter(substr(key, 1, 2) == "IT") %>%
filter(substr(key, 1, 2) == "IT")
getwd()
library(tidyverse)
library(sp)
library(sf)
# Read in the detailed GADM shapes
shapes_it <- readRDS("../../gadm_based_shapefiles/rds_format/gadm1_nuts3_counties.Rds") %>%
filter(substr(key, 1, 2) == "IT") %>%
filter(substr(key, 1, 2) == "IT")
shapes_it@proj4string
library(tidyverse)
library(sp)
library(sf)
# Read in the detailed GADM shapes
shapes_it <- readRDS("../../gadm_based_shapefiles/rds_format/gadm1_nuts3_counties.Rds") %>%
filter(substr(key, 1, 2) == "IT") %>%
filter(substr(key, 1, 2) == "IT")
# Get the NUTS3 centroids
# See ?coordinates() for more info on centroid calculation
shapes_it <- as_Spatial(shapes_it) # Function is not available in sf, so we convert back to SpatialPolygonsDataFrame
centroids <- tibble(
nuts3 = shapes_it$key,
centroid_x = coordinates(shapes_it)[,1],
centroid_y = coordinates(shapes_it)[,2])
# Trasnform the centroids into a geometry set
all_centroids <-
centroids[,2:3] %>%
as.data.frame %>%
st_as_sf(coords = c(1,2)) %>%
st_geometry()
shapes_it@proj4string
# Trasnform the centroids into a geometry set
clean_stadiums <- filter(all_venues, !is.na(location))
all_stadiums <-
data.frame(x=(clean_stadiums$location)$x, y=(clean_stadiums$location)$y) %>%
as.data.frame %>%
st_as_sf(coords = c(1,2)) %>%
st_geometry()
# Add the CRS type
st_crs(all_stadiums) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Now calculate all the distances (takes a few moments to run)
all_distances <- st_distance(all_stadiums, all_stadiums)
# Convert the matrix to table and meters to KM
stadium_dist_table <- all_distances %>%
as_tibble() %>%
rename_all(function(x) clean_stadiums$id) %>% # rename the rows
mutate(from_stadium = clean_stadiums$id) %>%
gather(key=to_stadium, value=dist, -from_stadium) %>%
mutate(to_stadium = as.integer(to_stadium)) %>%
mutate(dist = as.numeric(dist)) %>%
arrange(to_stadium, from_stadium) %>%
left_join(select(clean_stadiums, id, from_name=name),
by=c("from_stadium"="id")) %>%
left_join(select(clean_stadiums, id, to_name=name),
by=c("to_stadium"="id"))
clean_stadiums <- filter(all_venues, !is.na(location))
all_stadiums <-
data.frame(x=(clean_stadiums$location)$x, y=(clean_stadiums$location)$y) %>%
as.data.frame %>%
st_as_sf(coords = c(1,2)) %>%
st_geometry()
# Add the CRS type
st_crs(all_stadiums) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Purpose: This driver file is a simple interface to run
# all of the R files in this folder.
# Date: 07/30/2020
require(tidyverse)
require(sp)
require(sf)
require(tigris)
require(lubridate)
require(randomForest)
############################################################
#### A. Make the results for earliest hotspots in US/IT ####
############################################################
# A1: Generate the distance between the centroids of all Italian provinces
source("early_exposure/a1_gen_italy_distances.R")
# A2: Prepare COVID and SCI data for binscatters and maps
source("early_exposure/a2_prep_data_for_binscatters.R")
# A3: Make the SCI to intital hotspots and early COVID maps
source("early_exposure/a3_make_maps.R")
# A4 is a Stata file run from run_all_stata_scripts.do
rm(list=ls())
############################################
#### B. Make time series results for US ####
############################################
# B1: Make the two case weighted measures of interest (RAM intensive!)
source("time_series/b1_make_weighted_measures.R")
# B2: Build the regression table for the time series analyses
source("time_series/b2_build_time_series_regress_dat.R")
# B3: Generate the distance between the centroids of all Italian provinces
source("time_series/b3_prediction_exercise.R")
# B4 is a Stata file run from run_all_stata_scripts.do
require(tidyverse)
require(sp)
require(sf)
require(tigris)
require(lubridate)
require(randomForest)
### FILL THESE LINES BEFORE RUNNING
dir.sci_dat_county <- "../../data_DONT_SYNC/county_county.tsv"
dir.sci_dat_gadm1_nuts3_counties <- "../../data_DONT_SYNC/gadm1_nuts3_counties_gadm1_nuts3_counties.tsv"
############################################################
#### A. Make the results for earliest hotspots in US/IT ####
############################################################
# A1: Generate the distance between the centroids of all Italian provinces
source("early_exposure/a1_gen_italy_distances.R")
# A2: Prepare COVID and SCI data for binscatters and maps
source("early_exposure/a2_prep_data_for_binscatters.R")
# A3: Make the SCI to intital hotspots and early COVID maps
source("early_exposure/a3_make_maps.R")
### FILL THESE LINES BEFORE RUNNING
dir.sci_dat_county <- "../../data_DONT_SYNC/county_county.tsv"
# B1: Make the two case weighted measures of interest (RAM intensive!)
source("time_series/b1_make_weighted_measures.R")
# B2: Build the regression table for the time series analyses
source("time_series/b2_build_time_series_regress_dat.R")
# B3: Generate the distance between the centroids of all Italian provinces
source("time_series/b3_prediction_exercise.R")
# B4 is a Stata file run from run_all_stata_scripts.do
